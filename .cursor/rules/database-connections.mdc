---
description: Documents how database connections are established and managed, covering authentication types, connection string generation, and client implementation patterns.
globs:
alwaysApply: false
---
# Database Connections Architecture

## Overview

This document explains how database connections are established and managed in this application framework. The architecture is designed to be modular, allowing different database types to be supported through a consistent interface.

## Key Components

### Base SQL Client

The application extends `AsyncSQLClient` from the Application SDK to create database-specific client implementations. The base client handles:

- Connection pooling
- Async connection management
- Error handling
- Query execution

### Database-Specific Clients

Each supported database has its own client implementation in `app/clients/{database_type}/__init__.py`, for example:

- `PostgreSQLClient` in `app/clients/__init__.py` (currently directly in the clients directory)
- Other database clients would follow the pattern `app/clients/{database_type}/__init__.py`

## Connection String Generation

The framework uses a strategy pattern for generating connection strings based on authentication type:

1. **Basic Authentication**: Username/password
2. **IAM User Authentication**: For cloud databases that support IAM users
3. **IAM Role Authentication**: For cloud databases that support IAM roles

Example from PostgreSQLClient:

```python
def get_sqlalchemy_connection_string(self) -> str:
    authType = self.credentials.get("authType", "basic")  # Default to basic auth

    connection_string = ""

    match authType:
        case "iam_user":
            connection_string = self.get_iam_user_connection_string()
        case "iam_role":
            connection_string = self.get_iam_role_connection_string()
        case "basic":
            connection_string = self.get_basic_connection_string()
        case _:
            raise ValueError(f"Invalid auth type: {authType}")

    for key, value in self.source_connection_params.items():
        if "?" not in connection_string:
            connection_string += "?"
        else:
            connection_string += "&"
        connection_string += f"{key}={value}"

    return connection_string