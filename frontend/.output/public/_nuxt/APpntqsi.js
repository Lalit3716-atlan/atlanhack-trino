var A=Object.defineProperty;var B=(u,r,a)=>r in u?A(u,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):u[r]=a;var I=(u,r,a)=>B(u,typeof r!="symbol"?r+"":r,a);import{r as w,j as P,o as H,T as E,f as F,t as b,v,x as c,L as M,M as U,y as z,U as J,V as G,G as V,z as W,Q as K,R as Q}from"./BLReLmma.js";import{s as j}from"./B2rXRiIs.js";import"./CIHsDYR3.js";class X{constructor(){I(this,"baseUrl");I(this,"defaultHeaders");this.baseUrl=(window==null?void 0:window.location.origin)||"http://0.0.0.0:8000",this.defaultHeaders={"Content-Type":"application/json"}}async request(r,a){const i=`${this.baseUrl}${r}`,y={...this.defaultHeaders,...a.headers},h={...a,headers:y};try{const m=await fetch(i,h);if(!m.ok)throw new Error(`HTTP error! status: ${m.status}`);const x=m.headers.get("content-type");return x&&x.includes("application/json")?await m.json():await m.text()}catch(m){throw console.error("API request failed:",m),m}}async get(r,a={}){const i=new URL(`${this.baseUrl}${r}`);return Object.keys(a).forEach(y=>i.searchParams.append(y,a[y])),this.request(i.pathname+i.search,{method:"GET"})}async post(r,a){return this.request(r,{method:"POST",body:JSON.stringify(a)})}async put(r,a){return this.request(r,{method:"PUT",body:JSON.stringify(a)})}async delete(r){return this.request(r,{method:"DELETE"})}}const R={preflight:"/workflows/preflight-check",testAuthentication:"/workflows/test-authentication",login:"/login",logout:"/logout",runWorkflow:"/workflows/start-workflow",events:"/events",telemetry:{logs:"/telemetry/v1/logs",metrics:"/telemetry/v1/metrics",traces:"/telemetry/v1/traces"}},L=new X,S={preflight:async u=>(await L.post(R.preflight,u)).json(),fetchTelemetryLogs:async u=>{const{keyword:r,limit:a=100}=u;return await L.get(`${R.telemetry.logs}?skip=0&limit=${a}&keyword=${r}`)},fetchTelemetryTraces:async u=>{const{keyword:r,limit:a=100}=u;return await L.get(`${R.telemetry.traces}?skip=0&limit=${a}`)},fetchTelemetryMetrics:async u=>{const{keyword:r,limit:a=100}=u;return await L.get(`${R.telemetry.metrics}?skip=0&limit=${a}`)}},Y={class:"flex flex-wrap justify-between px-8 py-4 mb-8"},Z={class:"w-full mb-8 lg:w-1/2"},ee=c("h3",{class:"mb-2 text-lg font-semibold"},"Active HTTP Server Requests",-1),te=c("p",{class:"mb-2 text-sm text-gray-600"},"Displays the number of active HTTP server requests over time, provides insights into server load and traffic patterns.",-1),se={class:"mb-2 text-lg font-semibold"},ae={class:"mb-2 text-sm text-gray-600"},re=["id"],oe={__name:"Metrices",setup(u){const{BaseChart:r}=j,a=w(null),i=w(null),y=w(null),h=w(null),m=w([]),x=[i,y,h];let _=null;const $=async()=>{try{const n={keyword:""},p=await S.fetchTelemetryMetrics(n);return console.log(p,"<-- response"),p}catch(n){return console.log(n),[]}},D=P(()=>["HTTP Request Duration","HTTP Response Size","HTTP Request Size"]),N=n=>n.includes("Duration")?"Shows the distribution of request processing times. Data is grouped into time ranges (in milliseconds).":n.includes("Response Size")?"Illustrates the distribution of response data volumes. Data is grouped into size ranges (in bytes).":n.includes("Request Size")?"Displays the distribution of incoming data volumes. Data is grouped into size ranges (in bytes).":"Data is grouped into ranges to show the overall distribution.";function O(n){const p=n[0].histogram.explicitBounds;return n.map(f=>{const e=f.histogram.bucketCounts.map(Number);return p.map((o,s)=>{const t=p[s+1]||1/0;return[o,t,e[s]]})})}function q(n,p,f,e){const s=e.map((l,d)=>({data:l,totalCount:l.reduce((T,k)=>T+k[2],0),index:d})).sort((l,d)=>d.totalCount-l.totalCount).slice(0,10).map(l=>{const d=[0,0,0,0,0];return l.data.forEach(T=>{const k=T[0],C=T[2];k<10?d[0]+=C:k<100?d[1]+=C:k<1e3?d[2]+=C:k<1e4?d[3]+=C:d[4]+=C}),d}),t=Math.max(...s.flat()),g={container:n.id,tooltip:{trigger:"item",formatter:function(l){return`${l.seriesName}<br/>${l.name}: ${l.value}`}},xAxis:{name:f,type:"category",data:["0-9","10-99","100-999","1000-9999","10000+"],axisLabel:{rotate:45,interval:0,fontSize:10}},yAxis:{name:"Frequency",type:"value",max:t*1.1},series:s.slice(0,5).map((l,d)=>({name:`Dataset ${d+1}`,type:"bar",data:l,stack:"total",barWidth:"50%"})),grid:{left:"10%",right:"10%",bottom:"20%",top:"10%",containLabel:!1},legend:{type:"scroll",orient:"horizontal",bottom:0,formatter:l=>l.replace("Dataset ","")}};return new r(g)}return H(()=>{E(async()=>{const n=await $(),p=Object.keys(n).find(o=>{var s,t;return(t=(s=n[o])==null?void 0:s.data_points[0])==null?void 0:t.sum}),f=Object.keys(n).filter(o=>{var s,t;return(t=(s=n[o])==null?void 0:s.data_points[0])==null?void 0:t.histogram}),e=n[p];if(a.value){const o=e.data_points.map(g=>new Date(parseInt(g.sum.timeUnixNano)/1e6).toLocaleTimeString()),s=e.data_points.map(g=>parseInt(g.sum.asInt)),t={container:a.value.id,tooltip:{trigger:"axis"},xAxis:{type:"category",data:o,axisLabel:{rotate:45,interval:"auto"}},yAxis:{type:"value",name:"Requests",min:0,max:Math.max(...s)+1},series:[{name:"Requests",type:"line",data:s,smooth:!0}]};_=new r(t)}if(i.value){let s=function(t){const g=[i,y,h];m.value=t.map((l,d)=>{const T=O(l.data_points);return q(g[d].value,l.description,l.unit,T)})};const o=f.map(t=>({...n[t]}));s(o)}})}),F(()=>{_==null||_.destroy()}),(n,p)=>(b(),v("div",Y,[c("div",Z,[ee,te,c("div",{id:"lineChart",ref_key:"lineChartRef",ref:a,class:"h-80"},null,512)]),(b(),v(M,null,U(x,(f,e)=>c("div",{key:e,class:"w-full mb-8 lg:w-1/2"},[c("h3",se,z(J(D)[e]),1),c("p",ae,z(N(J(D)[e])),1),c("div",{id:`histogramChart-container-${e}`,ref_for:!0,ref:f,class:"h-80"},null,8,re)])),64)),c("div",{id:"histogramChart-container-0",ref_key:"histogramChartRef0",ref:i,style:{width:"600px",height:"400px"},class:"mb-8"},null,512),c("div",{id:"histogramChart-container-1",ref_key:"histogramChartRef1",ref:y,style:{width:"600px",height:"400px"},class:"mb-8"},null,512),c("div",{id:"histogramChart-container-2",ref_key:"histogramChartRef2",ref:h,style:{width:"600px",height:"400px"},class:"mb-8"},null,512)]))}},ne={class:"flex flex-col w-full h-full overflow-y-hidden"},ie=c("h1",{class:"px-4 my-4 mb-4 text-4xl font-bold"},"Telemetry",-1),le={class:"px-4 mb-4"},ce={class:"flex border-b"},ue=["onClick"],de={class:"flex-grow"},me={key:0,id:"logs-table",class:"w-full px-12"},he={key:1,class:"w-full px-12",id:"traces-table"},pe={key:2,class:"w-full"},we={__name:"telemetry",setup(u){const{Table:r}=j;G();const a=w([]),i=w([]),y=["Logs","Traces","Metrics"],h=w("Logs"),m=[{key:"trace_id",header:"Trace ID"},{key:"start_time",header:"Start Time",formatter:e=>new Date(e).toLocaleString()},{key:"end_time",header:"End Time",formatter:e=>new Date(e).toLocaleString()},{key:"name",header:"Name"},{key:"span_id",header:"Span ID"}],x=e=>{h.value=e,e==="Logs"?_():e==="Traces"&&$()},_=async()=>{await N(),new r("logs-table",{columns:D,data:JSON.parse(JSON.stringify(a.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:e=>n(e)}})},$=async()=>{await q(),new r("traces-table",{columns:m,data:JSON.parse(JSON.stringify(i.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:e=>p(e)}})},D=[{key:"severity",header:"Severity",formatter:e=>`
            <div class="flex items-center">
                <span class="${f[e]||"text-gray-600"} text-base"> ${e} </span>
            </div>
        `},{key:"observed_timestamp",header:"Timestamp",formatter:e=>new Date(e).toLocaleString()},{key:"body",header:"Body"},{key:"trace_id",header:"Trace ID"},{key:"span_id",header:"Span ID"}],N=async()=>{try{const e={keyword:""},o=await S.fetchTelemetryLogs(e);return o&&o.length?a.value=o:a.value=[],a.value}catch(e){return console.log(e),[]}},O=e=>{const o=e.reduce((s,t)=>(s[t.trace_id]||(s[t.trace_id]={trace_id:t.trace_id,spans:[],start_time:new Date(t.start_time).toLocaleString("en-US",{hour:"numeric",minute:"numeric",second:"numeric",hour12:!0}),end_time:new Date(t.end_time).toLocaleString("en-US",{hour:"numeric",minute:"numeric",second:"numeric",hour12:!0}),name:t.name,span_id:t.span_id}),s[t.trace_id].spans.push(t),s[t.trace_id].start_time=new Date(Math.min(new Date(s[t.trace_id].start_time),new Date(t.start_time))),s[t.trace_id].end_time=new Date(Math.max(new Date(s[t.trace_id].end_time),new Date(t.end_time))),s),{});return Object.values(o).sort((s,t)=>new Date(t.start_time)-new Date(s.start_time))},q=async()=>{try{const e={keyword:""},o=await S.fetchTelemetryTraces(e);return o&&o.length?(i.value=O(o),console.log(i.value,"<-- tracesData.value")):i.value=[],i.value}catch(e){return console.log(e),[]}},n=async({key:e,value:o})=>{const s={keyword:o};switch(e){case"search":const t=await S.fetchTelemetryLogs(s);console.log(t,"<---- search response"),a.value=t||[]}return new r("logs-table",{columns:D,data:JSON.parse(JSON.stringify(a.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:t=>n(t)}}),JSON.parse(JSON.stringify(a.value))},p=async({key:e,value:o})=>{const s={keyword:o},t=await S.fetchTelemetryTraces(s);return i.value=t||[],new r("traces-table",{columns:m,data:JSON.parse(JSON.stringify(i.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:g=>p(g)}}),JSON.parse(JSON.stringify(i.value))};H(()=>{E(async()=>{await _()})}),V(h,e=>{e==="Logs"&&_(),e==="Traces"&&$()});const f={DEBUG:"text-gray-600",INFO:"text-blue-500",WARNING:"text-yellow-500",ERROR:"text-red-400",CRITICAL:"text-red-500"};return(e,o)=>(b(),v("div",ne,[ie,c("div",le,[c("ul",ce,[(b(),v(M,null,U(y,s=>c("li",{class:"mr-1",key:s},[c("a",{class:Q(["inline-block py-2 px-4 text-base font-medium cursor-pointer transition-all duration-300 ease-in-out",h.value===s?"border-b-2 border-blue-500 text-blue-500":"text-gray-500 hover:text-gray-700 border-b-2 border-transparent"]),onClick:()=>x(s)},z(s),11,ue)])),64))])]),c("div",de,[h.value==="Logs"?(b(),v("div",me)):h.value==="Traces"?(b(),v("div",he)):h.value==="Metrics"?(b(),v("div",pe,[W(J(oe))])):K("",!0)])]))}};export{we as default};
