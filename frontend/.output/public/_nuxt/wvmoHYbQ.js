import{r as b,j as q,o as z,L as $,f as H,t as _,v as w,x as l,M as I,N as M,y as J,O as E,P as j,G as F,z as P,Q as U,R as G}from"./6uX0v96d.js";import{s as A,a as k}from"./CCyKfl42.js";const V={class:"flex flex-wrap justify-between px-8 py-4 mb-8 overflow-y-auto"},K={class:"w-full mb-8 lg:w-1/2"},W=l("h3",{class:"mb-2 text-lg font-semibold"},"Active HTTP Server Requests",-1),Q=l("p",{class:"mb-2 text-sm text-gray-600"},"Displays the number of active HTTP server requests over time, provides insights into server load and traffic patterns.",-1),X={class:"mb-2 text-lg font-semibold"},Y={class:"mb-2 text-sm text-gray-600"},Z=["id"],ee={__name:"Metrices",setup(B){const{BaseChart:f}=A,p=b(null),u=b(null),y=b(null),S=b(null),d=b([]),D=[u,y,S];let x=null;const O=async()=>{try{const r={keyword:""},m=await k.fetchTelemetryMetrics(r);return console.log(m,"<-- response"),m}catch(r){return console.log(r),[]}},C=q(()=>["HTTP Request Duration","HTTP Response Size","HTTP Request Size"]),N=r=>r.includes("Duration")?"Shows the distribution of request processing times. Data is grouped into time ranges (in milliseconds).":r.includes("Response Size")?"Illustrates the distribution of response data volumes. Data is grouped into size ranges (in bytes).":r.includes("Request Size")?"Displays the distribution of incoming data volumes. Data is grouped into size ranges (in bytes).":"Data is grouped into ranges to show the overall distribution.";function L(r){const m=r[0].histogram.explicitBounds;return r.map(v=>{const c=v.histogram.bucketCounts.map(Number);return m.map((h,n)=>{const i=m[n+1]||1/0;return[h,i,c[n]]})})}function T(r,m,v,c){const n=c.map((o,e)=>({data:o,totalCount:o.reduce((a,s)=>a+s[2],0),index:e})).sort((o,e)=>e.totalCount-o.totalCount).slice(0,10).map(o=>{const e=[0,0,0,0,0];return o.data.forEach(a=>{const s=a[0],t=a[2];s<10?e[0]+=t:s<100?e[1]+=t:s<1e3?e[2]+=t:s<1e4?e[3]+=t:e[4]+=t}),e}),i=Math.max(...n.flat()),g={container:r[0].id,tooltip:{trigger:"item",formatter:function(o){return`${o.seriesName}<br/>${o.name}: ${o.value}`}},xAxis:{name:v,type:"category",data:["0-9","10-99","100-999","1000-9999","10000+"],axisLabel:{rotate:45,interval:0,fontSize:10}},yAxis:{name:"Frequency",type:"value",max:i*1.1},series:n.slice(0,5).map((o,e)=>({name:`Dataset ${e+1}`,type:"bar",data:o,stack:"total",barWidth:"50%"})),grid:{left:"10%",right:"10%",bottom:"20%",top:"10%",containLabel:!1},legend:{type:"scroll",orient:"horizontal",bottom:0,formatter:o=>o.replace("Dataset ","")}};return new f(g)}return z(()=>{$(async()=>{const r=await O(),m=Object.keys(r).find(h=>{var n,i;return(i=(n=r[h])==null?void 0:n.data_points[0])==null?void 0:i.sum}),v=Object.keys(r).filter(h=>{var n,i;return(i=(n=r[h])==null?void 0:n.data_points[0])==null?void 0:i.histogram}),c=r[m];if(p.value){const h=c.data_points.map(g=>new Date(parseInt(g.sum.timeUnixNano)/1e6).toLocaleTimeString()),n=c.data_points.map(g=>parseInt(g.sum.asInt)),i={container:p.value.id,tooltip:{trigger:"axis"},xAxis:{type:"category",data:h,axisLabel:{rotate:45,interval:"auto"}},yAxis:{type:"value",name:"Requests",min:0,max:Math.max(...n)+1},series:[{name:"Requests",type:"line",data:n,smooth:!0}]};x=new f(i)}if(u.value){let n=function(i){const g=[u,y,S];d.value=i.map((o,e)=>{const a=L(o.data_points);debugger;return T(g[e].value,o.description,o.unit,a)})};const h=v.map(i=>({...r[i]}));n(h)}})}),H(()=>{x==null||x.destroy()}),(r,m)=>(_(),w("div",V,[l("div",K,[W,Q,l("div",{id:"lineChart",ref_key:"lineChartRef",ref:p,class:"h-80"},null,512)]),(_(),w(I,null,M(D,(v,c)=>l("div",{key:c,class:"w-full mb-8 lg:w-1/2"},[l("h3",X,J(E(C)[c]),1),l("p",Y,J(N(E(C)[c])),1),l("div",{id:`histogramChart-container-${c}`,ref_for:!0,ref:v,class:"h-80"},null,8,Z)])),64))]))}},te={class:"flex flex-col w-full p-5 m-4 overflow-y-hidden border-2 border-gray-200 border-solid rounded-lg box-shadow-md"},se=l("h1",{class:"px-4 my-4 mb-4 text-4xl font-bold"},"Telemetry",-1),ae={class:"flex items-center justify-between mx-4 border-b border-gray-200 border-solid"},re={class:"flex border-b"},oe=["onClick"],ne=l("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"none"},[l("path",{stroke:"#3b82f6","stroke-linecap":"round","stroke-linejoin":"round",d:"M4.99 6.232h-3v-3"}),l("path",{stroke:"#3b82f6","stroke-linecap":"round","stroke-linejoin":"round",d:"M4.11 11.889a5.5 5.5 0 1 0 0-7.778L1.99 6.232"})],-1),ie=[ne],le={class:"flex-grow overflow-y-auto"},ce={key:0,id:"logs-table",class:"w-full"},ue={key:1,class:"w-full px-4",id:"traces-table"},de={key:2,class:"w-full px-4",id:"events-table"},me={key:3,class:"w-full px-4"},ye={__name:"telemetry",setup(B){const{Table:f}=A;j();const p=b([]),u=b([]),y=b([]),S=["Logs","Traces","Events","Metrics"],d=b("Logs"),D=[{key:"trace_id",header:"Trace ID"},{key:"start_time",header:"Start Time",formatter:e=>new Date(e).toLocaleString()},{key:"end_time",header:"End Time",formatter:e=>new Date(e).toLocaleString()},{key:"name",header:"Name"},{key:"span_id",header:"Span ID"}],x=[{key:"name",header:"Name"},{key:"event_type",header:"Event Type"},{key:"status",header:"Status"},{key:"application_name",header:"Application Name"},{key:"attributes",header:"Attributes"},{key:"timestamp",header:"Timestamp"},{key:"observed_timestamp",header:"Observed Timestamp"}],O=e=>{d.value=e,e==="Logs"?T():e==="Traces"?r():e==="Events"&&N()},C=()=>{d.value==="Logs"?T():d.value==="Traces"?r():d.value==="Events"&&N()},N=async()=>{await L(),new f("events-table",{columns:x,data:JSON.parse(JSON.stringify(y.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:e=>g(e)}})},L=async()=>{try{const e={keyword:""},a=await k.fetchTelemetryEvents(e);return a&&a.length?y.value=a:y.value=[],y.value}catch(e){return console.log(e),[]}},T=async()=>{await v(),new f("logs-table",{columns:m,data:JSON.parse(JSON.stringify(p.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:e=>n(e)}})},r=async()=>{await h(),new f("traces-table",{columns:D,data:JSON.parse(JSON.stringify(u.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:e=>i(e)}})},m=[{key:"severity",header:"Severity",formatter:e=>`
            <div class="flex items-center">
                <span class="${o[e]||"text-gray-600"} text-base"> ${e} </span>
            </div>
        `},{key:"observed_timestamp",header:"Timestamp",formatter:e=>new Date(e).toLocaleString()},{key:"body",header:"Body"},{key:"trace_id",header:"Trace ID"},{key:"span_id",header:"Span ID"}],v=async()=>{try{const e={keyword:""},a=await k.fetchTelemetryLogs(e);return a&&a.length?p.value=a:p.value=[],p.value}catch(e){return console.log(e),[]}},c=e=>{const a=e.reduce((s,t)=>(s[t.trace_id]||(s[t.trace_id]={trace_id:t.trace_id,spans:[],start_time:new Date(t.start_time).toLocaleString("en-US",{hour:"numeric",minute:"numeric",second:"numeric",hour12:!0}),end_time:new Date(t.end_time).toLocaleString("en-US",{hour:"numeric",minute:"numeric",second:"numeric",hour12:!0}),name:t.name,span_id:t.span_id}),s[t.trace_id].spans.push(t),s[t.trace_id].start_time=new Date(Math.min(new Date(s[t.trace_id].start_time),new Date(t.start_time))),s[t.trace_id].end_time=new Date(Math.max(new Date(s[t.trace_id].end_time),new Date(t.end_time))),s),{});return Object.values(a).sort((s,t)=>new Date(t.start_time)-new Date(s.start_time))},h=async()=>{try{const e={keyword:""},a=await k.fetchTelemetryTraces(e);return a&&a.length?(u.value=c(a),console.log(u.value,"<-- tracesData.value")):u.value=[],u.value}catch(e){return console.log(e),[]}},n=async({key:e,value:a})=>{const s={keyword:a};switch(e){case"search":const t=await k.fetchTelemetryLogs(s);console.log(t,"<---- search response"),p.value=t||[]}return new f("logs-table",{columns:m,data:JSON.parse(JSON.stringify(p.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:t=>n(t)}}),JSON.parse(JSON.stringify(p.value))},i=async({key:e,value:a})=>{const s={keyword:a},t=await k.fetchTelemetryTraces(s);return u.value=t||[],new f("traces-table",{columns:D,data:JSON.parse(JSON.stringify(u.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:R=>i(R)}}),JSON.parse(JSON.stringify(u.value))},g=async({key:e,value:a})=>{const s={keyword:a||""},t=await k.fetchTelemetryEvents(s);return y.value=t||[],new f("events-table",{columns:x,data:JSON.parse(JSON.stringify(y.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:R=>g(R)}}),JSON.parse(JSON.stringify(y.value))};z(()=>{$(async()=>{await T()})}),F(d,e=>{e==="Logs"&&T(),e==="Traces"&&r()});const o={DEBUG:"text-gray-600",INFO:"text-blue-500",WARNING:"text-yellow-500",ERROR:"text-red-400",CRITICAL:"text-red-500"};return(e,a)=>(_(),w("div",te,[se,l("div",ae,[l("ul",re,[(_(),w(I,null,M(S,s=>l("li",{class:"mr-1",key:s},[l("a",{class:G(["inline-block py-2 px-4 text-lg font-medium cursor-pointer transition-all duration-300 ease-in-out",d.value===s?"border-b-2 border-blue-500 text-blue-500":"text-gray-500 hover:text-gray-700 border-b-2 border-transparent"]),onClick:()=>O(s)},J(s),11,oe)])),64))]),l("button",{onClick:C,class:"p-2 ml-4 text-white transition-colors bg-white border border-solid rounded-md border-slate-400 hover:bg-white hover:border-blue-500 hover:shadow-md"},ie)]),l("div",le,[d.value==="Logs"?(_(),w("div",ce)):d.value==="Traces"?(_(),w("div",ue)):d.value==="Events"?(_(),w("div",de)):d.value==="Metrics"?(_(),w("div",me,[P(E(ee))])):U("",!0)])]))}};export{ye as default};
