import{s as z,a as T}from"./CMkSOJc1.js";import{r as _,j as q,o as I,J as M,f as H,t as w,v as x,x as i,K as $,L as A,y as R,M as E,E as j,z as F,N as U,O as P}from"./Bs1g9LMd.js";const K={class:"flex flex-wrap justify-between px-8 py-4 mb-8 overflow-y-auto"},V={class:"w-full mb-8 lg:w-1/2"},G={class:"mb-2 text-lg font-semibold"},W={class:"mb-2 text-sm text-gray-600"},Q=["id"],X={__name:"Metrices",setup(B){const{BaseChart:g}=z,p=_(null),u=_(null),h=_(null),D=_(null),d=_([]),C=[u,h,D];let k=null;const L=async()=>{try{const r={keyword:""};return await T.fetchTelemetryMetrics(r)}catch(r){return console.log(r),[]}},N=q(()=>["HTTP Request Duration","HTTP Response Size","HTTP Request Size"]),O=r=>r.includes("Duration")?"Shows the distribution of request processing times. Data is grouped into time ranges (in milliseconds).":r.includes("Response Size")?"Illustrates the distribution of response data volumes. Data is grouped into size ranges (in bytes).":r.includes("Request Size")?"Displays the distribution of incoming data volumes. Data is grouped into size ranges (in bytes).":"Data is grouped into ranges to show the overall distribution.";function J(r){const l=r[0].histogram.explicitBounds;return r.map(f=>{const c=f.histogram.bucketCounts.map(Number);return l.map((m,n)=>{const o=l[n+1]||1/0;return[m,o,c[n]]})})}function S(r,l,f,c){var v;const n=c.map((e,t)=>({data:e,totalCount:e.reduce((a,s)=>a+s[2],0),index:t})).sort((e,t)=>t.totalCount-e.totalCount).slice(0,10).map(e=>{const t=[0,0,0,0,0];return e.data.forEach(a=>{const s=a[0],b=a[2];s<10?t[0]+=b:s<100?t[1]+=b:s<1e3?t[2]+=b:s<1e4?t[3]+=b:t[4]+=b}),t}),o=Math.max(...n.flat()),y={container:(v=r[0])==null?void 0:v.id,tooltip:{trigger:"item",formatter:function(e){return`${e.seriesName}<br/>${e.name}: ${e.value}`}},xAxis:{name:f,type:"category",data:["0-9","10-99","100-999","1000-9999","10000+"],axisLabel:{rotate:45,interval:0,fontSize:10}},yAxis:{name:"Frequency",type:"value",max:o*1.1},series:n.slice(0,5).map((e,t)=>({name:`Dataset ${t+1}`,type:"bar",data:e,stack:"total",barWidth:"50%"})),grid:{left:"10%",right:"10%",bottom:"20%",top:"10%",containLabel:!1},legend:{type:"scroll",orient:"horizontal",bottom:0,formatter:e=>e.replace("Dataset ","")}};return new g(y)}return I(()=>{M(async()=>{const r=await L(),l=Object.keys(r).find(m=>{var n,o;return(o=(n=r[m])==null?void 0:n.data_points[0])==null?void 0:o.sum}),f=Object.keys(r).filter(m=>{var n,o;return(o=(n=r[m])==null?void 0:n.data_points[0])==null?void 0:o.histogram}),c=r[l];if(p.value){const m=c.data_points.map(y=>new Date(parseInt(y.sum.timeUnixNano)/1e6).toLocaleTimeString()),n=c.data_points.map(y=>parseInt(y.sum.asInt)),o={container:p.value.id,tooltip:{trigger:"axis"},xAxis:{type:"category",data:m,axisLabel:{rotate:45,interval:"auto"}},yAxis:{type:"value",name:"Requests",min:0,max:Math.max(...n)+1},series:[{name:"Requests",type:"line",data:n,smooth:!0}]};k=new g(o)}if(u.value){let n=function(o){const y=[u,h,D];d.value=o.map((v,e)=>{const t=J(v.data_points);return S(y[e].value,v.description,v.unit,t)})};const m=f.map(o=>({...r[o]}));n(m)}})}),H(()=>{k==null||k.destroy()}),(r,l)=>(w(),x("div",K,[i("div",V,[l[0]||(l[0]=i("h3",{class:"mb-2 text-lg font-semibold"},"Active HTTP Server Requests",-1)),l[1]||(l[1]=i("p",{class:"mb-2 text-sm text-gray-600"},"Displays the number of active HTTP server requests over time, provides insights into server load and traffic patterns.",-1)),i("div",{id:"lineChart",ref_key:"lineChartRef",ref:p,class:"h-80"},null,512)]),(w(),x($,null,A(C,(f,c)=>i("div",{key:c,class:"w-full mb-8 lg:w-1/2"},[i("h3",G,R(E(N)[c]),1),i("p",W,R(O(E(N)[c])),1),i("div",{id:`histogramChart-container-${c}`,ref_for:!0,ref:f,class:"h-80"},null,8,Q)])),64))]))}},Y={class:"flex flex-col w-full p-5 m-4 overflow-y-hidden border-2 border-gray-200 border-solid rounded-lg box-shadow-md"},Z={class:"flex items-center justify-between mx-4 border-b border-gray-200 border-solid"},ee={class:"flex border-b"},te=["onClick"],se={class:"flex-grow overflow-y-auto"},ae={key:0,id:"logs-table",class:"w-full"},re={key:1,class:"w-full px-4",id:"traces-table"},ne={key:2,class:"w-full px-4",id:"events-table"},oe={key:3,class:"w-full px-4"},ce={__name:"telemetry",setup(B){const{Table:g}=z,p=_([]),u=_([]),h=_([]),D=["Logs","Traces","Events","Metrics"],d=_("Logs"),C=[{key:"trace_id",header:"Trace ID"},{key:"start_time",header:"Start Time",formatter:e=>new Date(e).toLocaleString()},{key:"end_time",header:"End Time",formatter:e=>new Date(e).toLocaleString()},{key:"name",header:"Name"},{key:"span_id",header:"Span ID"}],k=[{key:"name",header:"Name"},{key:"event_type",header:"Event Type"},{key:"status",header:"Status"},{key:"application_name",header:"Application Name"},{key:"attributes",header:"Attributes"},{key:"timestamp",header:"Timestamp"},{key:"observed_timestamp",header:"Observed Timestamp"}],L=e=>{d.value=e,e==="Logs"?S():e==="Traces"?r():e==="Events"&&O()},N=()=>{d.value==="Logs"?S():d.value==="Traces"?r():d.value==="Events"&&O()},O=async()=>{await J(),new g("events-table",{columns:k,data:JSON.parse(JSON.stringify(h.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:e=>y(e)}})},J=async()=>{try{const e={keyword:""},t=await T.fetchTelemetryEvents(e);return t&&t.length?h.value=t:h.value=[],h.value}catch(e){return console.log(e),[]}},S=async()=>{await f(),new g("logs-table",{columns:l,data:JSON.parse(JSON.stringify(p.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:e=>n(e)}})},r=async()=>{await m(),new g("traces-table",{columns:C,data:JSON.parse(JSON.stringify(u.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:e=>o(e)}})},l=[{key:"severity",header:"Severity",formatter:e=>`
            <div class="flex items-center">
                <span class="${v[e]||"text-gray-600"} text-base"> ${e} </span>
            </div>
        `},{key:"observed_timestamp",header:"Timestamp",formatter:e=>new Date(e).toLocaleString()},{key:"body",header:"Body"},{key:"trace_id",header:"Trace ID"},{key:"span_id",header:"Span ID"}],f=async()=>{try{const e={keyword:""},t=await T.fetchTelemetryLogs(e);return t&&t.length?p.value=t:p.value=[],p.value}catch(e){return console.log(e),[]}},c=e=>{const t=e.reduce((a,s)=>(a[s.trace_id]||(a[s.trace_id]={trace_id:s.trace_id,spans:[],start_time:new Date(s.start_time).toLocaleString("en-US",{hour:"numeric",minute:"numeric",second:"numeric",hour12:!0}),end_time:new Date(s.end_time).toLocaleString("en-US",{hour:"numeric",minute:"numeric",second:"numeric",hour12:!0}),name:s.name,span_id:s.span_id}),a[s.trace_id].spans.push(s),a[s.trace_id].start_time=new Date(Math.min(new Date(a[s.trace_id].start_time),new Date(s.start_time))),a[s.trace_id].end_time=new Date(Math.max(new Date(a[s.trace_id].end_time),new Date(s.end_time))),a),{});return Object.values(t).sort((a,s)=>new Date(s.start_time)-new Date(a.start_time))},m=async()=>{try{const e={keyword:""},t=await T.fetchTelemetryTraces(e);return t&&t.length?(u.value=c(t),console.log(u.value,"<-- tracesData.value")):u.value=[],u.value}catch(e){return console.log(e),[]}},n=async({key:e,value:t})=>{const a={keyword:t};switch(e){case"search":const s=await T.fetchTelemetryLogs(a);console.log(s,"<---- search response"),p.value=s||[]}return new g("logs-table",{columns:l,data:JSON.parse(JSON.stringify(p.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:s=>n(s)}}),JSON.parse(JSON.stringify(p.value))},o=async({key:e,value:t})=>{const a={keyword:t},s=await T.fetchTelemetryTraces(a);return u.value=s||[],new g("traces-table",{columns:C,data:JSON.parse(JSON.stringify(u.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:b=>o(b)}}),JSON.parse(JSON.stringify(u.value))},y=async({key:e,value:t})=>{const a={keyword:t||""},s=await T.fetchTelemetryEvents(a);return h.value=s||[],new g("events-table",{columns:k,data:JSON.parse(JSON.stringify(h.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:b=>y(b)}}),JSON.parse(JSON.stringify(h.value))};I(()=>{M(async()=>{await S()})}),j(d,e=>{e==="Logs"&&S(),e==="Traces"&&r()});const v={DEBUG:"text-gray-600",INFO:"text-blue-500",WARNING:"text-yellow-500",ERROR:"text-red-400",CRITICAL:"text-red-500"};return(e,t)=>(w(),x("div",Y,[t[1]||(t[1]=i("h1",{class:"px-4 my-4 mb-4 text-4xl font-bold"},"Telemetry",-1)),i("div",Z,[i("ul",ee,[(w(),x($,null,A(D,a=>i("li",{class:"mr-1",key:a},[i("a",{class:P(["inline-block py-2 px-4 text-lg font-medium cursor-pointer transition-all duration-300 ease-in-out",d.value===a?"border-b-2 border-blue-500 text-blue-500":"text-gray-500 hover:text-gray-700 border-b-2 border-transparent"]),onClick:()=>L(a)},R(a),11,te)])),64))]),i("button",{onClick:N,class:"p-2 ml-4 text-white transition-colors bg-white border border-solid rounded-md border-slate-400 hover:bg-white hover:border-blue-500 hover:shadow-md"},t[0]||(t[0]=[i("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"none"},[i("path",{stroke:"#3b82f6","stroke-linecap":"round","stroke-linejoin":"round",d:"M4.99 6.232h-3v-3"}),i("path",{stroke:"#3b82f6","stroke-linecap":"round","stroke-linejoin":"round",d:"M4.11 11.889a5.5 5.5 0 1 0 0-7.778L1.99 6.232"})],-1)]))]),i("div",se,[d.value==="Logs"?(w(),x("div",ae)):d.value==="Traces"?(w(),x("div",re)):d.value==="Events"?(w(),x("div",ne)):d.value==="Metrics"?(w(),x("div",oe,[F(E(X))])):U("",!0)])]))}};export{ce as default};
