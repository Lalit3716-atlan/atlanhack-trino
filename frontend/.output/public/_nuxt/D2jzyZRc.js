import{_ as z,a as T,s as B}from"./Db1TrGNK.js";import{r as _,j as H,o as $,L as I,f as j,t as w,v as x,x as l,M,N as A,y as J,O as E,G as F,z as P,P as U,Q as G}from"./ChLB5Dgw.js";const V={class:"flex flex-wrap justify-between px-8 py-4 mb-8 overflow-y-auto"},K={class:"w-full mb-8 lg:w-1/2"},W=l("h3",{class:"mb-2 text-lg font-semibold"},"Active HTTP Server Requests",-1),Q=l("p",{class:"mb-2 text-sm text-gray-600"},"Displays the number of active HTTP server requests over time, provides insights into server load and traffic patterns.",-1),Y={class:"mb-2 text-lg font-semibold"},X={class:"mb-2 text-sm text-gray-600"},Z=["id"],ee={__name:"Metrices",setup(q){const y=_(null),m=_(null),p=_(null),g=_(null),N=_([]),u=[m,p,g];let k=null;const S=async()=>{try{const a={keyword:""};return await T.fetchTelemetryMetrics(a)}catch(a){return console.log(a),[]}},D=H(()=>["HTTP Request Duration","HTTP Response Size","HTTP Request Size"]),O=a=>a.includes("Duration")?"Shows the distribution of request processing times. Data is grouped into time ranges (in milliseconds).":a.includes("Response Size")?"Illustrates the distribution of response data volumes. Data is grouped into size ranges (in bytes).":a.includes("Request Size")?"Displays the distribution of incoming data volumes. Data is grouped into size ranges (in bytes).":"Data is grouped into ranges to show the overall distribution.";function C(a){const h=a[0].histogram.explicitBounds;return a.map(f=>{const c=f.histogram.bucketCounts.map(Number);return h.map((d,o)=>{const n=h[o+1]||1/0;return[d,n,c[o]]})})}function L(a,h,f,c){var b;const o=c.map((i,e)=>({data:i,totalCount:i.reduce((r,s)=>r+s[2],0),index:e})).sort((i,e)=>e.totalCount-i.totalCount).slice(0,10).map(i=>{const e=[0,0,0,0,0];return i.data.forEach(r=>{const s=r[0],t=r[2];s<10?e[0]+=t:s<100?e[1]+=t:s<1e3?e[2]+=t:s<1e4?e[3]+=t:e[4]+=t}),e}),n=Math.max(...o.flat()),v={container:(b=a[0])==null?void 0:b.id,tooltip:{trigger:"item",formatter:function(i){return`${i.seriesName}<br/>${i.name}: ${i.value}`}},xAxis:{name:f,type:"category",data:["0-9","10-99","100-999","1000-9999","10000+"],axisLabel:{rotate:45,interval:0,fontSize:10}},yAxis:{name:"Frequency",type:"value",max:n*1.1},series:o.slice(0,5).map((i,e)=>({name:`Dataset ${e+1}`,type:"bar",data:i,stack:"total",barWidth:"50%"})),grid:{left:"10%",right:"10%",bottom:"20%",top:"10%",containLabel:!1},legend:{type:"scroll",orient:"horizontal",bottom:0,formatter:i=>i.replace("Dataset ","")}};return new z(v)}return $(()=>{I(async()=>{const a=await S(),h=Object.keys(a).find(d=>{var o,n;return(n=(o=a[d])==null?void 0:o.data_points[0])==null?void 0:n.sum}),f=Object.keys(a).filter(d=>{var o,n;return(n=(o=a[d])==null?void 0:o.data_points[0])==null?void 0:n.histogram}),c=a[h];if(y.value){const d=c.data_points.map(v=>new Date(parseInt(v.sum.timeUnixNano)/1e6).toLocaleTimeString()),o=c.data_points.map(v=>parseInt(v.sum.asInt)),n={container:y.value.id,tooltip:{trigger:"axis"},xAxis:{type:"category",data:d,axisLabel:{rotate:45,interval:"auto"}},yAxis:{type:"value",name:"Requests",min:0,max:Math.max(...o)+1},series:[{name:"Requests",type:"line",data:o,smooth:!0}]};k=new z(n)}if(m.value){let o=function(n){const v=[m,p,g];N.value=n.map((b,i)=>{const e=C(b.data_points);return L(v[i].value,b.description,b.unit,e)})};const d=f.map(n=>({...a[n]}));o(d)}})}),j(()=>{k==null||k.destroy()}),(a,h)=>(w(),x("div",V,[l("div",K,[W,Q,l("div",{id:"lineChart",ref_key:"lineChartRef",ref:y,class:"h-80"},null,512)]),(w(),x(M,null,A(u,(f,c)=>l("div",{key:c,class:"w-full mb-8 lg:w-1/2"},[l("h3",Y,J(E(D)[c]),1),l("p",X,J(O(E(D)[c])),1),l("div",{id:`histogramChart-container-${c}`,ref_for:!0,ref:f,class:"h-80"},null,8,Z)])),64))]))}},te={class:"flex flex-col w-full p-5 m-4 overflow-y-hidden border-2 border-gray-200 border-solid rounded-lg box-shadow-md"},se=l("h1",{class:"px-4 my-4 mb-4 text-4xl font-bold"},"Telemetry",-1),ae={class:"flex items-center justify-between mx-4 border-b border-gray-200 border-solid"},re={class:"flex border-b"},oe=["onClick"],ne=l("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"none"},[l("path",{stroke:"#3b82f6","stroke-linecap":"round","stroke-linejoin":"round",d:"M4.99 6.232h-3v-3"}),l("path",{stroke:"#3b82f6","stroke-linecap":"round","stroke-linejoin":"round",d:"M4.11 11.889a5.5 5.5 0 1 0 0-7.778L1.99 6.232"})],-1),ie=[ne],le={class:"flex-grow overflow-y-auto"},ce={key:0,id:"logs-table",class:"w-full"},ue={key:1,class:"w-full px-4",id:"traces-table"},de={key:2,class:"w-full px-4",id:"events-table"},me={key:3,class:"w-full px-4"},ye={__name:"telemetry",setup(q){const{Table:y}=B,m=_([]),p=_([]),g=_([]),N=["Logs","Traces","Events","Metrics"],u=_("Logs"),k=[{key:"trace_id",header:"Trace ID"},{key:"start_time",header:"Start Time",formatter:e=>new Date(e).toLocaleString()},{key:"end_time",header:"End Time",formatter:e=>new Date(e).toLocaleString()},{key:"name",header:"Name"},{key:"span_id",header:"Span ID"}],S=[{key:"name",header:"Name"},{key:"event_type",header:"Event Type"},{key:"status",header:"Status"},{key:"application_name",header:"Application Name"},{key:"attributes",header:"Attributes"},{key:"timestamp",header:"Timestamp"},{key:"observed_timestamp",header:"Observed Timestamp"}],D=e=>{u.value=e,e==="Logs"?a():e==="Traces"?h():e==="Events"&&C()},O=()=>{u.value==="Logs"?a():u.value==="Traces"?h():u.value==="Events"&&C()},C=async()=>{await L(),new y("events-table",{columns:S,data:JSON.parse(JSON.stringify(g.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:e=>b(e)}})},L=async()=>{try{const e={keyword:""},r=await T.fetchTelemetryEvents(e);return r&&r.length?g.value=r:g.value=[],g.value}catch(e){return console.log(e),[]}},a=async()=>{await c(),new y("logs-table",{columns:f,data:JSON.parse(JSON.stringify(m.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:e=>n(e)}})},h=async()=>{await o(),new y("traces-table",{columns:k,data:JSON.parse(JSON.stringify(p.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:e=>v(e)}})},f=[{key:"severity",header:"Severity",formatter:e=>`
            <div class="flex items-center">
                <span class="${i[e]||"text-gray-600"} text-base"> ${e} </span>
            </div>
        `},{key:"observed_timestamp",header:"Timestamp",formatter:e=>new Date(e).toLocaleString()},{key:"body",header:"Body"},{key:"trace_id",header:"Trace ID"},{key:"span_id",header:"Span ID"}],c=async()=>{try{const e={keyword:""},r=await T.fetchTelemetryLogs(e);return r&&r.length?m.value=r:m.value=[],m.value}catch(e){return console.log(e),[]}},d=e=>{const r=e.reduce((s,t)=>(s[t.trace_id]||(s[t.trace_id]={trace_id:t.trace_id,spans:[],start_time:new Date(t.start_time).toLocaleString("en-US",{hour:"numeric",minute:"numeric",second:"numeric",hour12:!0}),end_time:new Date(t.end_time).toLocaleString("en-US",{hour:"numeric",minute:"numeric",second:"numeric",hour12:!0}),name:t.name,span_id:t.span_id}),s[t.trace_id].spans.push(t),s[t.trace_id].start_time=new Date(Math.min(new Date(s[t.trace_id].start_time),new Date(t.start_time))),s[t.trace_id].end_time=new Date(Math.max(new Date(s[t.trace_id].end_time),new Date(t.end_time))),s),{});return Object.values(r).sort((s,t)=>new Date(t.start_time)-new Date(s.start_time))},o=async()=>{try{const e={keyword:""},r=await T.fetchTelemetryTraces(e);return r&&r.length?(p.value=d(r),console.log(p.value,"<-- tracesData.value")):p.value=[],p.value}catch(e){return console.log(e),[]}},n=async({key:e,value:r})=>{const s={keyword:r};switch(e){case"search":const t=await T.fetchTelemetryLogs(s);console.log(t,"<---- search response"),m.value=t||[]}return new y("logs-table",{columns:f,data:JSON.parse(JSON.stringify(m.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:t=>n(t)}}),JSON.parse(JSON.stringify(m.value))},v=async({key:e,value:r})=>{const s={keyword:r},t=await T.fetchTelemetryTraces(s);return p.value=t||[],new y("traces-table",{columns:k,data:JSON.parse(JSON.stringify(p.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:R=>v(R)}}),JSON.parse(JSON.stringify(p.value))},b=async({key:e,value:r})=>{const s={keyword:r||""},t=await T.fetchTelemetryEvents(s);return g.value=t||[],new y("events-table",{columns:S,data:JSON.parse(JSON.stringify(g.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:R=>b(R)}}),JSON.parse(JSON.stringify(g.value))};$(()=>{I(async()=>{await a()})}),F(u,e=>{e==="Logs"&&a(),e==="Traces"&&h()});const i={DEBUG:"text-gray-600",INFO:"text-blue-500",WARNING:"text-yellow-500",ERROR:"text-red-400",CRITICAL:"text-red-500"};return(e,r)=>(w(),x("div",te,[se,l("div",ae,[l("ul",re,[(w(),x(M,null,A(N,s=>l("li",{class:"mr-1",key:s},[l("a",{class:G(["inline-block py-2 px-4 text-lg font-medium cursor-pointer transition-all duration-300 ease-in-out",u.value===s?"border-b-2 border-blue-500 text-blue-500":"text-gray-500 hover:text-gray-700 border-b-2 border-transparent"]),onClick:()=>D(s)},J(s),11,oe)])),64))]),l("button",{onClick:O,class:"p-2 ml-4 text-white transition-colors bg-white border border-solid rounded-md border-slate-400 hover:bg-white hover:border-blue-500 hover:shadow-md"},ie)]),l("div",le,[u.value==="Logs"?(w(),x("div",ce)):u.value==="Traces"?(w(),x("div",ue)):u.value==="Events"?(w(),x("div",de)):u.value==="Metrics"?(w(),x("div",me,[P(E(ee))])):U("",!0)])]))}};export{ye as default};
