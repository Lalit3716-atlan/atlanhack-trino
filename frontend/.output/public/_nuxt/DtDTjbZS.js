var B=Object.defineProperty;var P=(d,s,t)=>s in d?B(d,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[s]=t;var z=(d,s,t)=>P(d,typeof s!="symbol"?s+"":s,t);import{r as w,j as F,o as M,S as j,f as G,t as _,v as k,x as h,L as A,M as H,y as q,T as I,U as V,G as W,z as K,Q,R as X}from"./BNMHI0I8.js";import{s as U}from"./DMr2ynjX.js";import"./DAhs7S0T.js";class Y{constructor(){z(this,"baseUrl");z(this,"defaultHeaders");this.baseUrl=(window==null?void 0:window.location.origin)||"http://0.0.0.0:8000",this.defaultHeaders={"Content-Type":"application/json"}}async request(s,t){const i=`${this.baseUrl}${s}`,p={...this.defaultHeaders,...t.headers},D={...t,headers:p};try{const l=await fetch(i,D);if(!l.ok)throw new Error(`HTTP error! status: ${l.status}`);const T=l.headers.get("content-type");return T&&T.includes("application/json")?await l.json():await l.text()}catch(l){throw console.error("API request failed:",l),l}}async get(s,t={}){const i=new URL(`${this.baseUrl}${s}`);return Object.keys(t).forEach(p=>i.searchParams.append(p,t[p])),this.request(i.pathname+i.search,{method:"GET"})}async post(s,t){return this.request(s,{method:"POST",body:JSON.stringify(t)})}async put(s,t){return this.request(s,{method:"PUT",body:JSON.stringify(t)})}async delete(s){return this.request(s,{method:"DELETE"})}}const $={preflight:"/workflows/preflight-check",testAuthentication:"/workflows/test-authentication",login:"/login",logout:"/logout",runWorkflow:"/workflows/start-workflow",events:"/events",telemetry:{logs:"/telemetry/v1/logs",metrics:"/telemetry/v1/metrics",traces:"/telemetry/v1/traces",events:"/telemetry/v1/events"}},N=new Y,S={preflight:async d=>(await N.post($.preflight,d)).json(),fetchTelemetryLogs:async d=>{const{keyword:s,limit:t=100}=d;return await N.get(`${$.telemetry.logs}?skip=0&limit=${t}&keyword=${s}`)},fetchTelemetryTraces:async d=>{const{keyword:s,limit:t=100}=d;return await N.get(`${$.telemetry.traces}?skip=0&limit=${t}`)},fetchTelemetryMetrics:async d=>{const{keyword:s,limit:t=100}=d;return await N.get(`${$.telemetry.metrics}?skip=0&limit=${t}`)},fetchTelemetryEvents:async d=>{const{keyword:s,limit:t=100}=d;return await N.get(`${$.telemetry.events}?skip=0&limit=${t}`)}},Z={class:"flex flex-wrap justify-between px-8 py-4 mb-8 overflow-y-auto"},ee={class:"w-full mb-8 lg:w-1/2"},te=h("h3",{class:"mb-2 text-lg font-semibold"},"Active HTTP Server Requests",-1),se=h("p",{class:"mb-2 text-sm text-gray-600"},"Displays the number of active HTTP server requests over time, provides insights into server load and traffic patterns.",-1),ae={class:"mb-2 text-lg font-semibold"},re={class:"mb-2 text-sm text-gray-600"},oe=["id"],ne={__name:"Metrices",setup(d){const{BaseChart:s}=U,t=w(null),i=w(null),p=w(null),D=w(null),l=w([]),T=[i,p,D];let x=null;const E=async()=>{try{const n={keyword:""},g=await S.fetchTelemetryMetrics(n);return console.log(g,"<-- response"),g}catch(n){return console.log(n),[]}},O=F(()=>["HTTP Request Duration","HTTP Response Size","HTTP Request Size"]),L=n=>n.includes("Duration")?"Shows the distribution of request processing times. Data is grouped into time ranges (in milliseconds).":n.includes("Response Size")?"Illustrates the distribution of response data volumes. Data is grouped into size ranges (in bytes).":n.includes("Request Size")?"Displays the distribution of incoming data volumes. Data is grouped into size ranges (in bytes).":"Data is grouped into ranges to show the overall distribution.";function R(n){const g=n[0].histogram.explicitBounds;return n.map(b=>{const y=b.histogram.bucketCounts.map(Number);return g.map((f,u)=>{const m=g[u+1]||1/0;return[f,m,y[u]]})})}function C(n,g,b,y){const u=y.map((c,e)=>({data:c,totalCount:c.reduce((o,r)=>o+r[2],0),index:e})).sort((c,e)=>e.totalCount-c.totalCount).slice(0,10).map(c=>{const e=[0,0,0,0,0];return c.data.forEach(o=>{const r=o[0],a=o[2];r<10?e[0]+=a:r<100?e[1]+=a:r<1e3?e[2]+=a:r<1e4?e[3]+=a:e[4]+=a}),e}),m=Math.max(...u.flat()),v={container:n.id,tooltip:{trigger:"item",formatter:function(c){return`${c.seriesName}<br/>${c.name}: ${c.value}`}},xAxis:{name:b,type:"category",data:["0-9","10-99","100-999","1000-9999","10000+"],axisLabel:{rotate:45,interval:0,fontSize:10}},yAxis:{name:"Frequency",type:"value",max:m*1.1},series:u.slice(0,5).map((c,e)=>({name:`Dataset ${e+1}`,type:"bar",data:c,stack:"total",barWidth:"50%"})),grid:{left:"10%",right:"10%",bottom:"20%",top:"10%",containLabel:!1},legend:{type:"scroll",orient:"horizontal",bottom:0,formatter:c=>c.replace("Dataset ","")}};return new s(v)}return M(()=>{j(async()=>{const n=await E(),g=Object.keys(n).find(f=>{var u,m;return(m=(u=n[f])==null?void 0:u.data_points[0])==null?void 0:m.sum}),b=Object.keys(n).filter(f=>{var u,m;return(m=(u=n[f])==null?void 0:u.data_points[0])==null?void 0:m.histogram}),y=n[g];if(t.value){const f=y.data_points.map(v=>new Date(parseInt(v.sum.timeUnixNano)/1e6).toLocaleTimeString()),u=y.data_points.map(v=>parseInt(v.sum.asInt)),m={container:t.value.id,tooltip:{trigger:"axis"},xAxis:{type:"category",data:f,axisLabel:{rotate:45,interval:"auto"}},yAxis:{type:"value",name:"Requests",min:0,max:Math.max(...u)+1},series:[{name:"Requests",type:"line",data:u,smooth:!0}]};x=new s(m)}if(i.value){let u=function(m){const v=[i,p,D];l.value=m.map((c,e)=>{const o=R(c.data_points);return C(v[e].value,c.description,c.unit,o)})};const f=b.map(m=>({...n[m]}));u(f)}})}),G(()=>{x==null||x.destroy()}),(n,g)=>(_(),k("div",Z,[h("div",ee,[te,se,h("div",{id:"lineChart",ref_key:"lineChartRef",ref:t,class:"h-80"},null,512)]),(_(),k(A,null,H(T,(b,y)=>h("div",{key:y,class:"w-full mb-8 lg:w-1/2"},[h("h3",ae,q(I(O)[y]),1),h("p",re,q(L(I(O)[y])),1),h("div",{id:`histogramChart-container-${y}`,ref_for:!0,ref:b,class:"h-80"},null,8,oe)])),64))]))}},ie={class:"flex flex-col w-full p-5 m-4 overflow-y-hidden border-2 border-gray-200 border-solid rounded-lg box-shadow-md"},le=h("h1",{class:"px-4 my-4 mb-4 text-4xl font-bold"},"Telemetry",-1),ce={class:"flex items-center justify-between mx-4 border-b border-gray-200 border-solid"},ue={class:"flex border-b"},de=["onClick"],me=h("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"none"},[h("path",{stroke:"#3b82f6","stroke-linecap":"round","stroke-linejoin":"round",d:"M4.99 6.232h-3v-3"}),h("path",{stroke:"#3b82f6","stroke-linecap":"round","stroke-linejoin":"round",d:"M4.11 11.889a5.5 5.5 0 1 0 0-7.778L1.99 6.232"})],-1),he=[me],pe={class:"flex-grow overflow-y-auto"},ye={key:0,id:"logs-table",class:"w-full"},ge={key:1,class:"w-full px-4",id:"traces-table"},fe={key:2,class:"w-full px-4",id:"events-table"},ve={key:3,class:"w-full px-4"},Te={__name:"telemetry",setup(d){const{Table:s}=U;V();const t=w([]),i=w([]),p=w([]),D=["Logs","Traces","Metrics","Events"],l=w("Logs"),T=[{key:"trace_id",header:"Trace ID"},{key:"start_time",header:"Start Time",formatter:e=>new Date(e).toLocaleString()},{key:"end_time",header:"End Time",formatter:e=>new Date(e).toLocaleString()},{key:"name",header:"Name"},{key:"span_id",header:"Span ID"}],x=[{key:"name",header:"Name"},{key:"event_type",header:"Event Type"},{key:"status",header:"Status"},{key:"application_name",header:"Application Name"},{key:"attributes",header:"Attributes"},{key:"timestamp",header:"Timestamp"},{key:"observed_timestamp",header:"Observed Timestamp"}],E=e=>{l.value=e,e==="Logs"?C():e==="Traces"?n():e==="Events"&&L()},O=()=>{l.value==="Logs"?C():l.value==="Traces"?n():l.value==="Events"&&L()},L=async()=>{await R(),new s("events-table",{columns:x,data:JSON.parse(JSON.stringify(p.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:e=>v(e)}})},R=async()=>{try{const e={keyword:""},o=await S.fetchTelemetryEvents(e);return o&&o.length?p.value=o:p.value=[],p.value}catch(e){return console.log(e),[]}},C=async()=>{await b(),new s("logs-table",{columns:g,data:JSON.parse(JSON.stringify(t.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:e=>u(e)}})},n=async()=>{await f(),new s("traces-table",{columns:T,data:JSON.parse(JSON.stringify(i.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:e=>m(e)}})},g=[{key:"severity",header:"Severity",formatter:e=>`
            <div class="flex items-center">
                <span class="${c[e]||"text-gray-600"} text-base"> ${e} </span>
            </div>
        `},{key:"observed_timestamp",header:"Timestamp",formatter:e=>new Date(e).toLocaleString()},{key:"body",header:"Body"},{key:"trace_id",header:"Trace ID"},{key:"span_id",header:"Span ID"}],b=async()=>{try{const e={keyword:""},o=await S.fetchTelemetryLogs(e);return o&&o.length?t.value=o:t.value=[],t.value}catch(e){return console.log(e),[]}},y=e=>{const o=e.reduce((r,a)=>(r[a.trace_id]||(r[a.trace_id]={trace_id:a.trace_id,spans:[],start_time:new Date(a.start_time).toLocaleString("en-US",{hour:"numeric",minute:"numeric",second:"numeric",hour12:!0}),end_time:new Date(a.end_time).toLocaleString("en-US",{hour:"numeric",minute:"numeric",second:"numeric",hour12:!0}),name:a.name,span_id:a.span_id}),r[a.trace_id].spans.push(a),r[a.trace_id].start_time=new Date(Math.min(new Date(r[a.trace_id].start_time),new Date(a.start_time))),r[a.trace_id].end_time=new Date(Math.max(new Date(r[a.trace_id].end_time),new Date(a.end_time))),r),{});return Object.values(o).sort((r,a)=>new Date(a.start_time)-new Date(r.start_time))},f=async()=>{try{const e={keyword:""},o=await S.fetchTelemetryTraces(e);return o&&o.length?(i.value=y(o),console.log(i.value,"<-- tracesData.value")):i.value=[],i.value}catch(e){return console.log(e),[]}},u=async({key:e,value:o})=>{const r={keyword:o};switch(e){case"search":const a=await S.fetchTelemetryLogs(r);console.log(a,"<---- search response"),t.value=a||[]}return new s("logs-table",{columns:g,data:JSON.parse(JSON.stringify(t.value)),options:{scrollable:!0,searchable:!0,pageSize:20,onChange:a=>u(a)}}),JSON.parse(JSON.stringify(t.value))},m=async({key:e,value:o})=>{const r={keyword:o},a=await S.fetchTelemetryTraces(r);return i.value=a||[],new s("traces-table",{columns:T,data:JSON.parse(JSON.stringify(i.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:J=>m(J)}}),JSON.parse(JSON.stringify(i.value))},v=async({key:e,value:o})=>{const r={keyword:o||""},a=await S.fetchTelemetryEvents(r);return p.value=a||[],new s("events-table",{columns:x,data:JSON.parse(JSON.stringify(p.value)),options:{scrollable:!0,searchable:!0,pageSize:20,expandable:!0,onChange:J=>v(J)}}),JSON.parse(JSON.stringify(p.value))};M(()=>{j(async()=>{await C()})}),W(l,e=>{e==="Logs"&&C(),e==="Traces"&&n()});const c={DEBUG:"text-gray-600",INFO:"text-blue-500",WARNING:"text-yellow-500",ERROR:"text-red-400",CRITICAL:"text-red-500"};return(e,o)=>(_(),k("div",ie,[le,h("div",ce,[h("ul",ue,[(_(),k(A,null,H(D,r=>h("li",{class:"mr-1",key:r},[h("a",{class:X(["inline-block py-2 px-4 text-lg font-medium cursor-pointer transition-all duration-300 ease-in-out",l.value===r?"border-b-2 border-blue-500 text-blue-500":"text-gray-500 hover:text-gray-700 border-b-2 border-transparent"]),onClick:()=>E(r)},q(r),11,de)])),64))]),h("button",{onClick:O,class:"p-2 ml-4 text-white transition-colors bg-white border border-solid rounded-md border-slate-400 hover:bg-white hover:border-blue-500 hover:shadow-md"},he)]),h("div",pe,[l.value==="Logs"?(_(),k("div",ye)):l.value==="Traces"?(_(),k("div",ge)):l.value==="Events"?(_(),k("div",fe)):l.value==="Metrics"?(_(),k("div",ve,[K(I(ne))])):Q("",!0)])]))}};export{Te as default};
